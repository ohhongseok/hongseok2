#/--------------------------------------------------------------------------/
#Date : 2020-09-07
#Lecture : 나도코딩 파이썬 강의 / WikiDocs 점프투 파이썬

#-------------------[파일 입출력]-------------------
### scorefile.txt라는거로 저장을 하고, 쓰기모드(w)로 실행, utf-8.을 해주지 않으면 한글 입력시 깨짐
"""
score_file2 = open("scorefile.txt","w",encoding="utf-8")
print("수학 : 0", file=score_file2)
print("영어 : 50", file=score_file2)

# 파일 입출력을 열었으면, 항상 닫는거로 마무리 해줘야 함 
score_file2.close()
"""


### a를 사용할 경우, 이전 파일에서 그대로 읽어올 수 있음
"""
score_file3 = open("scorefile.txt", "a", encoding="utf-8")
score_file3.write("과학 : 80")
score_file3.write("\n코딩 : 100")
# 얘도 마찬가지로 사용 후 파일을 닫아줘야 함
score_file3.close()
"""

### .txt의 모든 요소를 읽어오는것
"""
score_file = open("scorefile.txt", "r", encoding="utf-8")
print(score_file.read())
score_file.close()
"""

### 한줄한줄씩 읽어오는것
"""
score_file = open("scorefile.txt", "r", encoding="utf-8")
# 줄별읽고 한줄  읽고 커서는 다음줄로 이동
print(score_file.readline(),end="") # end 사용하면, 다음줄 이동 없이 넘어가기 가능
print(score_file.readline()) 
print(score_file.readline()) 
print(score_file.readline()) 
score_file.close()
"""

### 몇줄일지 모를때 파일 확인하기
"""
score_file = open("scorefile.txt", "r", encoding="utf-8")
print()
print("end를 사용할 때 파일 출럭 \n")
while True:
    line = score_file.readline()
    if not line :
        break
    print(line , end="")
score_file.close()
"""

### 리스트에 값을 넣고 처리하기
"""
score_file = open("scorefile.txt", "r", encoding="utf-8")
# list 형태로 저장
lines = score_file.readlines() 
for line in lines :
    print(line, end="")
score_file.close()
"""

#-------------------[pickle]-------------------
# 프로그램 상에서 우리가 사용하는 데이터를 파일 형태로 저장해 주는것
### 피클 사용하기
"""
import pickle

profile_file = open("profile.pickle","wb") # 피클은 이진화된 파일로 읽어
profile ={"이름" : "박명수", "나이" : 30, "취미":["축구","골프","코딩"]}
print(pickle)
pickle.dump(profile, profile_file) # profile에 있는 정보를 profile_file에 집어넣는것
profile_file.close()
"""

### 피클 파일 가져오기
"""
profile_file = open("profile.pickle","rb") # 피클은 이진화된 파일로 읽어
profile = pickle.load(profile_file) # 파일에 있는 정보를 profile에 불러오기
print(profile)
profile_file.close()
"""

#-------------------[with]-------------------
### with 사용
"""
import pickle
# profile.pickle이라는 파일을 열어서 profile_file라는 변수로 저장하고
with open("profile.pickle","rb") as profile_file :
    print(pickle.load(profile_file)) # 로드를 한 후에 프린트
# 특징은 close() 를 따로 안써도 with를 쓰면 close() 가능
"""


### 피클 사용안하고 일반적인 file with로 쓰기

"""
with open("study.txt","w",encoding="utf-8") as study_file :
    study_file.write("파이썬을 공부하고 있음\n")

### 피클 사용안하고 일반적인 file with로 읽기

with open("study.txt","r",encoding="utf-8") as study_file :
    print(study_file.read())
"""

#-------------------[클래스]-------------------
"""
### 기본적 클래스 사용하기
#유닛 클래스 정의

class unit :
    def __init__(self, name, hp, damage): # 파이썬에서 만들어지는 생성자 /자동으로 호출되는 부분
        self.name = name                  # 클래스 내에서 정의된 변수이다. / 그 변수를 가지고 초기화 및 사용 가능
        self.hp = hp                      # 
        self.damage = damage
        print("{0} 유닛이 생성되었습니다.".format(self.name))
        print("체력 : {0}, 공격력 :{1}".format(self.hp ,self.damage))
        print()

# 마린과 탱크는 유닛클래스의 인스턴스
# init의 정보와 동일한 갯수를 보내야 한다.
marin1 = unit("마린",40,5)
marin1 = unit("마린2",40,5)
tank = unit("탱크",150,35)

race = unit("레이스",80,5)
# unit 함수 외에서 맴버변수 사용 가능
print("유닛이름 : {0}, 공격력 : {1}".format(race.name,race.damage))

race2 = unit("레이스2",80,5)
race2.clocking = True               #클로킹이라는 변수가 class내에 없음, 외부에서 추가로 변수를 할당할 수 있음

if race2.clocking == True :
    print("{0} 은 현재 클로킹 상태입니다.".format(race2.name))
"""

#-------------------[메소드]-------------------
"""
# 일반 유닛
class unit :
    def __init__(self, name, hp): # 파이썬에서 만들어지는 생성자 /자동으로 호출되는 부분
        self.name = name                  # 클래스 내에서 정의된 변수이다. / 그 변수를 가지고 초기화 및 사용 가능
        self.hp = hp                      # 

class attackunit(unit):                   # 공격 유닛은 일반유닛의 정보를 상속받아서 생성 (unit)  
    def __init__(self, name , hp, damage) :
        unit.__init__(self,name ,hp)      # 이름과 체력을 넘겨주기
        self.damage = damage

    # 클래스 내에선 메소드 앞에 self를 무조건 적어줘야함
    def attack(self, location):
        print("{0}:{1} 방향을 공격함. [공격력 {2}]".format(self.name, location, self.damage))

    def damaged(self, damaged):
        print("{0}:{1} 데미지를 입었습니다.".format(self.name, damaged))
        self.hp -=damaged
        print("{0} : 현재 체력은 {1} 입니다.".format(self.name, self.hp))

        if self.hp <=0 :
            print("{0} : 파괴되었습니다.".format(self.name))
#-------------------[상속]-------------------
# 메딕

firebat1 =attackunit("파벳",50,16)
firebat1.attack("5시")

firebat1.damaged(25)
firebat1.damaged(25)
"""
